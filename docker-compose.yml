version: "2"
services:
  privileged:
    restart: always
    image: busybox:1.30.1
    privileged: true
    command: >
      sh -c
      "echo never | tee /sys/kernel/mm/transparent_hugepage/enabled;
      echo never | tee /sys/kernel/mm/transparent_hugepage/defrag;
      sysctl -w vm.max_map_count=262144;
      while true; do sleep 10000d; done;"

  gitlab-postgres:
    restart: always
    image: postgres:${GITLAB_POSTGRES_TAG}
    healthcheck:
      test: "pg_isready -U gitlab"
      interval: 1m
      timeout: 5s
      retries: 5
    environment:
      - TZ=Asia/Tokyo
      - POSTGRES_USER=gitlab
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=gitlabhq_production
    volumes:
      - ./data/gitlab/gitlab/postgres12:/var/lib/postgresql/data
  gitlab-redis:
    restart: always
    image: redis:${GITLAB_REDIS_TAG}
    healthcheck:
      test: "redis-cli ping"
      interval: 1m
      timeout: 5s
      retries: 5
    command:
      - --loglevel warning
    sysctls:
      net.core.somaxconn: 1024
    volumes:
      - ./data/gitlab/redis:/data
    environment:
      - TZ=Asia/Tokyo
  gitlab-ci-multi-runner:
    restart: always
    image: gitlab/gitlab-runner:${GITLAB_RUNNER_TAG}
    healthcheck:
      test: "gitlab-runner health-check"
      interval: 1m
      timeout: 5s
      retries: 5
    volumes:
      - ./data/gitlab/gitlab-ci-multi-runner/data:/home/gitlab-runner
      - ./data/gitlab/gitlab-ci-multi-runner/config:/etc/gitlab-runner
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      - TZ=Asia/Tokyo
      - REGISTER_NON_INTERACTIVE=true
      - CI_SERVER_URL=http://${SERVER_NAME}/gitlab/
      - REGISTRATION_TOKEN=dsojDECUB8jeXaZzY4Gp
      - RUNNER_NAME=runner1
      - RUNNER_EXECUTOR=docker
      - RUNNER_TAG_LIST=docker
      - RUNNER_LIMIT=1
      - DOCKER_IMAGE=alpine:latest
      - DOCKER_VOLUMES=/var/run/docker.sock:/var/run/docker.sock
  gitlab:
    restart: always
    image: k0gihf9s/gitlab:${GITLAB_TAG}
    build:
      context: ./recipes/gitlab
      args:
        GITLAB_TAG: ${GITLAB_TAG}
    healthcheck:
      test: "healthcheck"
      interval: 1m
      timeout: 5s
      retries: 5
      start_period: 2m
    volumes:
      - ./backup/gitlab:/backups
      - ./data/gitlab/gitlab/repositories:/repositories
      - ./data/gitlab/gitlab/lfs-objects:/lfs
      - ./data/gitlab/gitlab/data:/home/git/data
      - /var/run/docker.sock:/var/run/docker.sock:ro
    environment:
      - DEBUG=false
      - TZ=Asia/Tokyo
      - GITLAB_TIMEZONE=Tokyo

      - GITLAB_REPOS_DIR=/repositories
      - GITLAB_BACKUP_DIR=/backups
      - GITLAB_LFS_OBJECTS_DIR=/lfs

      - DB_ADAPTER=postgresql
      - DB_HOST=gitlab-postgres
      - DB_PORT=5432
      - DB_USER=gitlab
      - DB_PASS=password
      - DB_NAME=gitlabhq_production

      - REDIS_HOST=gitlab-redis
      - REDIS_PORT=6379

      - GITLAB_HTTPS=false
      - SSL_SELF_SIGNED=false

      - GITLAB_SECRETS_DB_KEY_BASE=crbWbKhtCcnsjFMwPz7RFqrjbgWPjkzgwrnt9hL3KPwsjnhMVp37dKjTzvJHmzTk
      - GITLAB_SECRETS_SECRET_KEY_BASE=Fpg3dxXqcWwMtzTrJFVCfFkcspJsr9NH9MqjmsqgcRxTJ7VC4r7CwjsmwstVcWLC
      - GITLAB_SECRETS_OTP_KEY_BASE=RcgRF3NpcFtXXHgbmqTzL3RL3PWNczqKpXX73CRJgTnCmsbfftzvMKrjVz3z3qsb

      - GITLAB_HOST=${SERVER_NAME}
      - GITLAB_PORT=80
      - GITLAB_SSH_PORT=22
      - GITLAB_RELATIVE_URL_ROOT=/gitlab

      - GITLAB_NOTIFY_ON_BROKEN_BUILDS=true
      - GITLAB_NOTIFY_PUSHER=false

      - GITLAB_EMAIL=notifications@example.com
      - GITLAB_EMAIL_REPLY_TO=noreply@example.com
      - GITLAB_INCOMING_EMAIL_ADDRESS=reply@example.com

      - GITLAB_BACKUP_SCHEDULE=daily
      - GITLAB_BACKUP_TIME=01:00
      - GITLAB_BACKUP_EXPIRY=604800
      - GITLAB_BACKUP_SKIP=lfs

      - SMTP_ENABLED=true
      - SMTP_USER=gitlab@k0gihf9s.com
      - SMTP_PASS=password
      - SMTP_DOMAIN=smtp.gmail.com
      - SMTP_HOST=smtp.gmail.com
      - SMTP_PORT=587
      - SMTP_STARTTLS=true
      - SMTP_AUTHENTICATION=login

      - IMAP_ENABLED=false
      - IMAP_HOST=imap.gmail.com
      - IMAP_PORT=993
      - IMAP_USER=mailer@example.com
      - IMAP_PASS=password
      - IMAP_SSL=true
      - IMAP_STARTTLS=false

      - GITLAB_PAGES_ENABLED=true
      - GITLAB_PAGES_DOMAIN=${SERVER_NAME}
      - GITLAB_PAGES_HTTPS=false
      - GITLAB_PAGES_PORT=80
      - GITLAB_PAGES_EXTERNAL_HTTP=:8010

      - OAUTH_ENABLED=true
      - OAUTH_ALLOW_SSO=redmine
      - OAUTH_BLOCK_AUTO_CREATED_USERS=false
      - OAUTH_AUTO_LINK_LDAP_USER=false
      - OAUTH_AUTO_LINK_SAML_USER=false

      - OAUTH_REDMINE_API_KEY=WY24Y0BgXE2AsrqmKz2hz6ExIv7HyvsMfWOceap7
      - OAUTH_REDMINE_API_SECRET=RCKjeysimmioM8tyOU46UICS745O68GzQ5Wl1Ztc
      - OAUTH_REDMINE_DOMAIN=http://${SERVER_NAME}/redmine

      - NGINX_REAL_IP_RECURSIVE=on
      - NGINX_REAL_IP_TRUSTED_ADDRESSES=172.18.0.0/16

  redmine-mysql:
    restart: always
    image: k0gihf9s/mysql:${REDMINE_MYSQL_TAG}
    build:
      context: ./recipes/mysql
      args:
        REDMINE_MYSQL_TAG: ${REDMINE_MYSQL_TAG}
    healthcheck:
      test: "mysqladmin ping -u $$MYSQL_USER --password=$$MYSQL_PASSWORD"
      interval: 1m
      timeout: 5s
      retries: 5
    environment:
      - TZ=Asia/Tokyo

      - MYSQL_ROOT_PASSWORD=rootpass
      - MYSQL_USER=redmine
      - MYSQL_PASSWORD=password
      - MYSQL_DATABASE=redmine_production
    volumes:
      - ./data/redmine/mysql:/var/lib/mysql
  redmine-memcached:
    restart: always
    image: memcached:${REDMINE_MEMCACHED_TAG}
    healthcheck:
      test: "nc -z -w 1 localhost 11211"
      interval: 1m
      timeout: 5s
      retries: 5
    environment:
      - TZ=Asia/Tokyo
  redmine:
    restart: always
    image: k0gihf9s/redmine:${REDMINE_TAG}
    build:
      context: ./recipes/redmine
      args:
        REDMINE_TAG: ${REDMINE_TAG}
    volumes:
      - ./backup/redmine:/backups
      - ./data/redmine/redmine:/home/redmine/data
      - ./data/gitlab/gitlab/repositories:/git
    environment:
      - TZ=Asia/Tokyo

      - DB_ADAPTER=mysql2
      - DB_HOST=redmine-mysql
      - DB_PORT=3306
      - DB_USER=redmine
      - DB_PASS=password
      - DB_NAME=redmine_production

      - MEMCACHE_HOST=redmine-memcached
      - MEMCACHE_PORT=11211

      - REDMINE_PORT=80
      - REDMINE_HTTPS=false
      - REDMINE_RELATIVE_URL_ROOT=/redmine
      - REDMINE_SECRET_TOKEN=AtbntKzzO8vUjVwSnt9Cb7tDDkbM6UsUuSc5O7EATRBeqMyL7Gk0p14lwqGod

      - REDMINE_SUDO_MODE_ENABLED=false
      - REDMINE_SUDO_MODE_TIMEOUT=15

      - REDMINE_CONCURRENT_UPLOADS=2

      - REDMINE_BACKUPS_DIR=/backups
      - REDMINE_BACKUP_SCHEDULE=daily
      - REDMINE_BACKUP_EXPIRY=604800
      - REDMINE_BACKUP_TIME=1:00

      - SMTP_ENABLED=true
      - SMTP_METHOD=smtp
      - SMTP_USER=redmine@k0gihf9s.com
      - SMTP_PASS=password
      - SMTP_DOMAIN=smtp.gmail.com
      - SMTP_HOST=smtp.gmail.com
      - SMTP_PORT=587
      - SMTP_STARTTLS=true
      - SMTP_AUTHENTICATION=:login

      - IMAP_ENABLED=false
      - IMAP_HOST=imap.gmail.com
      - IMAP_PORT=993
      - IMAP_USER=mailer@example.com
      - IMAP_PASS=password
      - IMAP_SSL=true
      - IMAP_INTERVAL=30

      - NGINX_REAL_IP_RECURSIVE=on
      - NGINX_REAL_IP_TRUSTED_ADDRESSES=172.18.0.0/16

  jenkins:
    restart: always
    image: k0gihf9s/jenkins:${JENKINS_TAG}
    build:
      context: ./recipes/jenkins
      args:
        JENKINS_TAG: ${JENKINS_TAG}
    environment:
      - TZ=Asia/Tokyo

      - JENKINS_OPTS=--prefix=/jenkins --sessionTimeout=0
      - JAVA_OPTS=-Duser.timezone=Asia/Tokyo -Dfile.encoding=UTF-8 -Dsun.jnu.encoding=UTF-8
    volumes:
      - ./data/jenkins/jenkins:/var/jenkins_home
      - /var/run/docker.sock:/var/run/docker.sock:ro

  openldap:
    restart: always
    image: osixia/openldap-backup:${OPENLDAP_TAG}
    mem_limit: 128m
    environment:
      TZ: Asia/Tokyo
      LDAP_DOMAIN: k0gihf9s.org
      LDAP_ADMIN_PASSWORD: admin

      LDAP_BACKUP_CONFIG_CRON_EXP: "0 1 * * *"
      LDAP_BACKUP_DATA_CRON_EXP: "0 1 * * *"
      LDAP_BACKUP_TTL: 7
    volumes:
      - ./backup/ldap:/data/backup
      - ./data/ldap/database:/var/lib/ldap
      - ./data/ldap/config:/etc/ldap/slapd.d
  phpldapadmin:
    restart: always
    image: k0gihf9s/phpldapadmin:${PHPLDAPADMIN_TAG}
    build:
      context: ./recipes/phpldapadmin
      args:
        PHPLDAPADMIN_TAG: ${PHPLDAPADMIN_TAG}
    mem_limit: 128m
    environment:
      TZ: Asia/Tokyo
      PHPLDAPADMIN_LDAP_HOSTS: openldap
      PHPLDAPADMIN_HTTPS: "false"

  keycloak:
    restart: always
    image: jboss/keycloak:${KEYCLOAK_TAG}
    environment:
      TZ: Asia/Tokyo
      KEYCLOAK_USER: admin
      KEYCLOAK_PASSWORD: admin
      PROXY_ADDRESS_FORWARDING: "true"
      DB_VENDOR: POSTGRES
      DB_ADDR: keycloak-postgres
      DB_DATABASE: keycloak
      DB_USER: keycloak
      DB_SCHEMA: public
      DB_PASSWORD: keycloak
  keycloak-postgres:
    restart: always
    image: postgres:${KEYCLOAK_POSTGRES_TAG}
    mem_limit: 512m
    healthcheck:
      test: "pg_isready -U keycloak"
      interval: 1m
      timeout: 5s
      retries: 5
    environment:
      TZ: Asia/Tokyo
      POSTGRES_USER: keycloak
      POSTGRES_PASSWORD: keycloak
      POSTGRES_DB: keycloak
    volumes:
      - ./data/keycloak/postgres13:/var/lib/postgresql/data

  es01:
    restart: always
    image: k0gihf9s/elasticsearch:${ELASTICSEARCH_TAG}
    build:
      context: ./recipes/elasticsearch
      args:
        ELASTICSEARCH_TAG: ${ELASTICSEARCH_TAG}
    environment:
      - TZ=Asia/Tokyo
      - node.name=es01
      - cluster.name=es-docker-cluster
      - discovery.seed_hosts=es02
      - cluster.initial_master_nodes=es01,es02
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - "path.repo=/usr/share/elasticsearch/backup"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - ./data/elasticsearch/es01:/usr/share/elasticsearch/data
      - ./backup/elasticsearch:/usr/share/elasticsearch/backup
  es02:
    restart: always
    image: k0gihf9s/elasticsearch:${ELASTICSEARCH_TAG}
    build:
      context: ./recipes/elasticsearch
      args:
        ELASTICSEARCH_TAG: ${ELASTICSEARCH_TAG}
    environment:
      - TZ=Asia/Tokyo
      - node.name=es02
      - cluster.name=es-docker-cluster
      - discovery.seed_hosts=es01
      - cluster.initial_master_nodes=es01,es02
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - "path.repo=/usr/share/elasticsearch/backup"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - ./data/elasticsearch/es02:/usr/share/elasticsearch/data
      - ./backup/elasticsearch:/usr/share/elasticsearch/backup
  logstash:
    restart: always
    image: k0gihf9s/logstash:${ELASTICSEARCH_TAG}
    build:
      context: ./recipes/logstash
      args:
        ELASTICSEARCH_TAG: ${ELASTICSEARCH_TAG}
    volumes:
      - ./recipes/logstash/pipeline:/usr/share/logstash/pipeline
    environment:
      - TZ=Asia/Tokyo
  kibana:
    restart: always
    image: k0gihf9s/kibana:${ELASTICSEARCH_TAG}
    build:
      context: ./recipes/kibana
      args:
        ELASTICSEARCH_TAG: ${ELASTICSEARCH_TAG}
    volumes:
      - ./recipes/kibana/kibana.yml:/usr/share/kibana/config/kibana.yml
    environment:
      - TZ=Asia/Tokyo
      - I18N_LOCALE="ja-JP"

  alfresco:
    restart: always
    image: k0gihf9s/alfresco-content-repository-community:${ALFRESCO_TAG}
    build:
      context: ./recipes/alfresco-content-repository-community
      args:
        ALFRESCO_TAG: ${ALFRESCO_TAG}
        ALFRESCO_API_TAG: ${ALFRESCO_API_TAG}
    mem_limit: 1500m
    depends_on:
      - alfresco-postgres
    environment:
      TZ: Asia/Tokyo
      JAVA_TOOL_OPTIONS: "
        -Dencryption.keystore.type=JCEKS
        -Dencryption.cipherAlgorithm=DESede/CBC/PKCS5Padding
        -Dencryption.keyAlgorithm=DESede
        -Dencryption.keystore.location=/usr/local/tomcat/shared/classes/alfresco/extension/keystore/keystore
        -Dmetadata-keystore.password=mp6yc0UD9e
        -Dmetadata-keystore.aliases=metadata
        -Dmetadata-keystore.metadata.password=oKIWzVdEdA
        -Dmetadata-keystore.metadata.algorithm=DESede
        "
      JAVA_OPTS: "
        -Ddb.driver=org.postgresql.Driver
        -Ddb.username=alfresco
        -Ddb.password=alfresco
        -Ddb.url=jdbc:postgresql://alfresco-postgres:5432/alfresco
        -Dsolr.host=alfresco-solr6
        -Dsolr.port=8983
        -Dsolr.http.connection.timeout=1000
        -Dsolr.secureComms=none
        -Dsolr.baseUrl=/solr
        -Dindex.subsystem.name=solr6
        -Dalfresco.host=alfresco.${SERVER_NAME}
        -Dalfresco.port=443
        -Dalfresco.protocol=https
        -Dshare.host=alfresco.${SERVER_NAME}
        -Dshare.port=443
        -Dshare.protocol=https
        -Daos.baseUrlOverwrite=https://alfresco.${SERVER_NAME}:443/alfresco/aos
        -Dmessaging.broker.url=\"failover:(nio://alfresco-activemq:61616)?timeout=3000&jms.useCompression=true\"
        -Ddeployment.method=DOCKER_COMPOSE
        -Dopencmis.server.override=true
        -Dopencmis.server.value=https://alfresco.${SERVER_NAME}:443
        -DlocalTransform.core-aio.url=http://alfresco-transform-core-aio:8090/
        -Dcsrf.filter.enabled=false
        -Dgoogledocs.enabled=true
        -Dsmart.folders.enabled=true
        -Dsmart.folders.config.type.templates.qname.filter=*
        -Dalfresco.authentication.allowGuestLogin=false
        -Dauthentication.chain=identity-service1:identity-service,ldap-ad1:ldap-ad
        -Didentity-service.auth-server-url=https://keycloak.${SERVER_NAME}/auth
        -Didentity-service.realm=Demo
        -Didentity-service.resource=alfresco
        -Dldap.authentication.active=true
        -Dldap.authentication.userNameFormat=uid=%s,ou=People,dc=k0gihf9s,dc=org
        -Dldap.authentication.java.naming.provider.url=ldap://openldap:389
        -Dldap.synchronization.active=true
        -Dldap.synchronization.java.naming.security.principal=cn=admin,dc=k0gihf9s,dc=org
        -Dldap.synchronization.java.naming.security.credentials=admin
        -Dsynchronization.import.cron='0 1 * * * ?'
        -Dsynchronization.syncOnStartup=true
        -Dsynchronization.synchronizeChangesOnly=false
        -Dldap.synchronization.userSearchBase=ou=People,dc=k0gihf9s,dc=org
        -Dldap.synchronization.modifyTimestampAttributeName=modifyTimestamp
        -Dldap.synchronization.timestampFormat=yyyyMMddHHmmss\\'Z\\'
        -Dldap.synchronization.personType=inetOrgPerson
        -Dldap.synchronization.personQuery='(objectclass=inetOrgPerson)'
        -Dldap.synchronization.personDifferentialQuery='(&(objectclass=inetOrgPerson)(!(modifyTimestamp<={0})))'
        -Dldap.synchronization.userIdAttributeName=uid
        -Dldap.synchronization.userFirstNameAttributeName=sn
        -Dldap.synchronization.userLastNameAttributeName=givenName
        -Dldap.synchronization.userAccountStatusProperty=
        -Dldap.synchronization.userOrganizationalIdAttributeName=
        -Dldap.synchronization.attributeBatchSize=0
        -Dldap.synchronization.groupType=groupOfUniqueNames
        -Dldap.synchronization.groupSearchBase=ou=Group,dc=k0gihf9s,dc=org
        -Dldap.synchronization.groupQuery='(objectclass=groupOfUniqueNames)'
        -Dldap.synchronization.groupMemberAttributeName=uniqueMember
        -Dldap.synchronization.groupDisplayNameAttributeName=cn
        -XX:MinRAMPercentage=50 -XX:MaxRAMPercentage=80
        -XX:+UseG1GC -XX:+UseStringDeduplication
        "
    volumes:
      - ./data/alfresco/acs:/usr/local/tomcat/alf_data
      - ./logs/alfresco/alfresco:/usr/local/tomcat/logs
  alfresco-transform-core-aio:
    restart: always
    image: alfresco/alfresco-transform-core-aio:${ALFRESCO_TRANSFORM_TAG}
    mem_limit: 1536m
    environment:
      TZ: Asia/Tokyo
      JAVA_OPTS: " -XX:MinRAMPercentage=50 -XX:MaxRAMPercentage=80"
  alfresco-share:
    restart: always
    image: k0gihf9s/alfresco-share:${ALFRESCO_SHARE_TAG}
    build:
      context: ./recipes/alfresco-share
      args:
        ALFRESCO_SHARE_TAG: ${ALFRESCO_SHARE_TAG}
        SERVER_NAME: ${SERVER_NAME}
    mem_limit: 1g
    environment:
      TZ: Asia/Tokyo
      REPO_HOST: "alfresco"
      REPO_PORT: "8080"
      CSRF_FILTER_REFERER: https://alfresco.${SERVER_NAME}/.*
      CSRF_FILTER_ORIGIN: https://alfresco.${SERVER_NAME}
      JAVA_OPTS: "
        -Dalfresco.context=alfresco
        -Dalfresco.protocol=https
        -XX:MinRAMPercentage=50 -XX:MaxRAMPercentage=80
        "
    volumes:
      - ./logs/alfresco/share:/usr/local/tomcat/logs
  alfresco-postgres:
    restart: always
    image: postgres:${ALFRESCO_POSTGRES_TAG}
    healthcheck:
      test: "pg_isready -U alfresco"
      interval: 1m
      timeout: 5s
      retries: 5
    mem_limit: 512m
    environment:
      TZ: Asia/Tokyo
      POSTGRES_PASSWORD: alfresco
      POSTGRES_USER: alfresco
      POSTGRES_DB: alfresco
    command: postgres -c max_connections=300 -c log_min_messages=LOG
    volumes:
      - ./data/alfresco/postgres13:/var/lib/postgresql/data
  alfresco-postgres-backup:
    restart: always
    image: prodrigestivill/postgres-backup-local:${ALFRESCO_POSTGRES__BACKUPTAG}
    healthcheck:
      test: "curl -f localhost:8080 || exit 1"
      interval: 1m
      timeout: 5s
      retries: 5
    mem_limit: 512m
    user: postgres:postgres
    depends_on:
      - alfresco-postgres
    environment:
      TZ: Asia/Tokyo
      POSTGRES_HOST: alfresco-postgres
      POSTGRES_PASSWORD: alfresco
      POSTGRES_USER: alfresco
      POSTGRES_DB: alfresco
      POSTGRES_EXTRA_OPTS: -Z6 --schema=public --blobs
      SCHEDULE: "0 0 5 * * *"
      BACKUP_KEEP_DAYS: 7
      BACKUP_KEEP_WEEKS: 4
      BACKUP_KEEP_MONTHS: 6
      HEALTHCHECK_PORT: 8080
    volumes:
      - ./backup/alfresco/database:/backups
  alfresco-solr6:
    restart: always
    image: k0gihf9s/alfresco-search-services:${ALFRESCO_SEARCH_TAG}
    build:
      context: ./recipes/alfresco-search-services
      args:
        ALFRESCO_SEARCH_TAG: ${ALFRESCO_SEARCH_TAG}
    mem_limit: 2g
    environment:
      TZ: Asia/Tokyo
      #Solr needs to know how to register itself with Alfresco
      SOLR_ALFRESCO_HOST: alfresco
      SOLR_ALFRESCO_PORT: 8080
      #Alfresco needs to know how to call solr
      SOLR_SOLR_HOST: alfresco-solr6
      SOLR_SOLR_PORT: 8983
      #Create the default alfresco and archive cores
      SOLR_CREATE_ALFRESCO_DEFAULTS: alfresco,archive
      #HTTP by default
      ALFRESCO_SECURE_COMMS: none
    volumes:
      - ./data/alfresco/ass:/opt/alfresco-search-services/data
  alfresco-activemq:
    restart: always
    image: alfresco/alfresco-activemq:${ALFRESCO_ACTIVEMQ_TAG}
    mem_limit: 1g
    environment:
      TZ: Asia/Tokyo
    ports:
      - 8161:8161 # Web Console
      - 5672:5672 # AMQP
      - 61616:61616 # OpenWire
      - 61613:61613 # STOMP

  testlink-mariadb:
    restart: always
    image: bitnami/mariadb:${TESTLINK_MARIADB_TAG}
    environment:
      - TZ=Asia/Tokyo
      - MARIADB_USER=bn_testlink
      - MARIADB_DATABASE=bitnami_testlink
      - ALLOW_EMPTY_PASSWORD=yes
    volumes:
      - ./data/testlink/mariadb:/bitnami/mariadb
  testlink:
    restart: always
    image: k0gihf9s/testlink:${TESTLINK_TAG}
    build:
      context: ./recipes/testlink
      args:
        TESTLINK_TAG: ${TESTLINK_TAG}
    environment:
      - TZ=Asia/Tokyo
      - TESTLINK_LANGUAGE=ja_JP
      - MARIADB_HOST=testlink-mariadb
      - MARIADB_PORT_NUMBER=3306
      - TESTLINK_DATABASE_USER=bn_testlink
      - TESTLINK_DATABASE_NAME=bitnami_testlink
      - ALLOW_EMPTY_PASSWORD=yes
    volumes:
      - ./data/testlink/testlink:/bitnami/testlink

  nginx:
    restart: always
    image: nginx:${NGINX_TAG}
    mem_limit: 128m
    depends_on:
      - redmine
      - gitlab
      - jenkins
      - kibana
      - testlink
      - alfresco
      - alfresco-share
      - alfresco-solr6
      - keycloak
      - phpldapadmin
    ports:
      - "65124:80"
      - "22:22"
      - "60500:60500"
      - "443:443"
    volumes:
      - ./recipes/nginx/etc/dhparam.pem:/etc/nginx/dhparam.pem:ro
      - ./recipes/nginx/etc/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./recipes/nginx/etc/ssl_settings.conf:/etc/nginx/ssl_settings.conf:ro
      - ./recipes/nginx/etc/my.conf.d:/etc/nginx/my.conf.d:ro
      - ./recipes/nginx/html:/usr/share/nginx/html:ro
      - C:/Certbot:/etc/letsencrypt:ro
    environment:
      - TZ=Asia/Tokyo
